#+TITLE: Emacs configuration file
#+AUTHOR: Paul Heely
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes


* Credit
  Original files that form the basis of this customized version were downloaded from Lars Tveito's GitHub repository, [[https://github.com/larstvei/dot-emacs.git]].
  
* About

  An attempt to try org-mode with tangle to keep my emacs configuration well documented.

* Configurations
** Meta
   
   All changes to the configuration should be done in =init.org=, *not* in
   =init.el=. Any changes in the =init.el= will be overwritten by saving
   =init.org=. The =init.el= in this repo should not be tracked by git, and
   is replaced the first time Emacs is started (assuming it has been renamed
   to =~/.emacs.d=).

   Emacs can't load =.org=-files directly, but =org-mode= provides functions
   to extract the code blocks and write them to a file. There are multiple
   ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
   could just use =org-babel-load-file=, but I had problems with
   byte-compilation. Previously I tracked both the =org.=- and =el.=-files,
   but the git commits got a little messy. So here is a new approach.

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
   ;; This file replaces itself with the actual configuration at first run.

   ;; We can't tangle without org!
   (require 'org)
   ;; Open the configuration
   (find-file (concat user-emacs-directory "init.org"))
   ;; tangle it
   (org-babel-tangle)
   ;; load it
   (load-file (concat user-emacs-directory "init.el"))
   ;; finally byte-compile it
   (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
   git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
   git update-index --no-assume-unchanged init.el
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
   (defun tangle-init ()
     "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
     (when (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "init.org")))
       ;; Avoid running hooks when tangling.
       (let ((prog-mode-hook nil))
         (org-babel-tangle)
         (byte-compile-file (concat user-emacs-directory "init.el")))))

   (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC

   I'd like to keep a few settings private, so we load a =private.el= if it
   exists after the init-file has loaded.

   #+BEGIN_SRC emacs-lisp
   (add-hook
    'after-init-hook
    (lambda ()
      (let ((private-file (concat user-emacs-directory "private.el")))
        (when (file-exists-p private-file)
          (load-file private-file)))))
   #+END_SRC

** Packages

   Managing extensions for Emacs is simplified using =package= which is
   built in to Emacs 24 and newer. To load downloaded packages we need to
   initialize =package=. =cl-lub= is a library that contains many functions from
   Common Lisp, and comes in handy quite often, so we want to make sure it's
   loaded, along with =package=, which is obviously needed.

   #+BEGIN_SRC emacs-lisp
   (require 'cl-lib)
   (require 'package)
   (package-initialize)
   #+END_SRC

   Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
   archive and is well maintained.

   #+BEGIN_SRC emacs-lisp
   (setq package-archives
         '(("gnu" . "http://elpa.gnu.org/packages/")
           ("org" . "http://orgmode.org/elpa/")
           ("melpa" . "https://melpa.org/packages/")
           ("melpa-stable" . "https://stable.melpa.org/packages/")))
   #+END_SRC

   The configuration assumes that the packages listed below are
   installed. To ensure we install missing packages if they are missing.

   #+BEGIN_SRC emacs-lisp
   (let* ((packages
           '(auto-compile         ; automatically compile Emacs Lisp libraries
             exec-path-from-shell ; sets exec-path and $PATH from shell (OS X)
             idle-require         ; load emacs-lisp libraries while Emacs is idle
             git-gutter-fringe    ; Fringe version of git-gutter.el
             org))                  ; Outline-based notes management and organizer
          ;; Remove all packages already installed
          (packages (cl-remove-if 'package-installed-p packages)))
     (when packages
       (ignore-errors (package-refresh-contents)
                      (mapc 'package-install packages)
                      ;; This package is only relevant for Mac OS X.
                      (when (memq window-system '(mac ns))
                        (package-install 'exec-path-from-shell)))))
   #+END_SRC               

** Use-Package
   
   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   (require 'use-package)   
   #+END_SRC

** Mac OS X

   I run this configuration mostly on Mac OS X, so we need a couple of
   settings to make things work smoothly. In the package section
   =exec-path-from-shell= is included (only if you're running OS X), this is
   to include environment-variables from the shell. It makes using Emacs
   along with external processes a lot simpler. I also prefer using the
   =Command=-key as the =Meta=-key.

   #+BEGIN_SRC emacs-lisp
   (when (memq window-system '(mac ns))
     (exec-path-from-shell-initialize))
   #+END_SRC

** Require

   Some features are not loaded by default to minimize initialization time,
   so they have to be required (or loaded, if you will). =require=-calls
   tends to lead to the largest bottleneck's in a
   configuration. =idle-require= delays the =require=-calls to a time where
   Emacs is in idle. So this is great for stuff you eventually want to load,
   but is not a high priority.

   #+BEGIN_SRC emacs-lisp
   (require 'idle-require)             ; Need in order to use idle-require

   (dolist (feature
            '(auto-compile))           ; auto-compile .el files
     (idle-require feature))

   (setq idle-require-idle-delay 5)
   (idle-require-mode 1)
   #+END_SRC

** Sane defaults

   These are what /I/ consider to be saner defaults.

   We can set variables to whatever value we'd like using =setq=.

   #+BEGIN_SRC emacs-lisp
   (setq ;;auto-revert-interval 1            ; Refresh buffers fast
         ;;custom-file (make-temp-file "")   ; Discard customization's
         ;;default-input-method "TeX"        ; Use TeX when toggling input method
         echo-keystrokes 0.1               ; Show keystrokes asap
         inhibit-startup-message t         ; No splash screen please
         initial-scratch-message nil       ; Clean scratch buffer
         ;;recentf-max-saved-items 100       ; Show more recent files
         ring-bell-function 'ignore        ; Quiet
         sentence-end-double-space nil)    ; No double space
   ;; Some mac-bindings interfere with Emacs bindings.
   ;; (when (boundp 'mac-pass-command-to-system)
   ;;   (setq mac-pass-command-to-system nil))
   #+END_SRC

   Some variables are buffer-local, so changing them using =setq= will only
   change them in a single buffer. Using =setq-default= we change the
   buffer-local variable's default value.

   #+BEGIN_SRC emacs-lisp
   (setq-default ;fill-column 80                    ; Maximum line width
                 truncate-lines t                  ; Don't fold lines
                 indent-tabs-mode nil              ; Use spaces instead of tabs
                 split-width-threshold 160)         ; Split verticly by default
   #+END_SRC

   Since we increased the default maximum line width to 120, lets have larger frames when opening windows
   
   #+BEGIN_SRC emacs-lisp
   (setq initial-frame-alist
         '(
           (width . 125) ; character
           (height . 60) ; lines
           ))

   (setq default-frame-alist
         '(
           (width . 122) ; character
           (height . 58) ; lines
           ))
   #+END_SRC

   Answering /yes/ and /no/ to each question from Emacs can be tedious, a
   single /y/ or /n/ will suffice.

   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   To avoid file system clutter we put all auto saved files in a single
   directory.

   #+BEGIN_SRC emacs-lisp
   (defvar emacs-autosave-directory
     (concat user-emacs-directory "autosaves/")
     "This variable dictates where to put auto saves. It is set to a
     directory called autosaves located wherever your .emacs.d/ is
     located.")

   ;; Sets all files to be backed up and auto saved in a single directory.
   (setq backup-directory-alist
         `((".*" . ,emacs-autosave-directory))
         auto-save-file-name-transforms
         `((".*" ,emacs-autosave-directory t)))
   #+END_SRC

   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
   (set-language-environment "UTF-8")
   #+END_SRC

** Modes

   There are some modes that are enabled by default that I don't find
   particularly useful. We create a list of these modes, and disable all of
   these.

   #+BEGIN_SRC emacs-lisp
   (dolist (mode
            '(tool-bar-mode                ; No toolbars, more room for text
              scroll-bar-mode              ; No scroll bars either
              blink-cursor-mode))          ; The blinking cursor gets old
     (funcall mode 0))
   #+END_SRC

   Let's apply the same technique for enabling modes that are disabled by
   default.

   #+BEGIN_SRC emacs-lisp
   (dolist (mode
            '(column-number-mode           ; Show column number in mode line
              delete-selection-mode        ; Replace selected text
              show-paren-mode))            ; Highlight matching parentheses
     (funcall mode 1))
   #+END_SRC   

   Support for unfiling a region

   #+BEGIN_SRC emacs-lisp
    (defun unfill-region (beg end)
      "Unfill the region, joining text paragraphs into a single
    logical line.  This is useful, e.g., for use with
    `visual-line-mode'."
      (interactive "*r")
      (let ((fill-column (point-max)))
        (fill-region beg end)))
    
    ;; Handy key definition
    (define-key global-map "\C-\M-Q" 'unfill-region)
  #+END_SRC
   
** Visual
   [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]] gives a great visual indication of where you've made
   changes since your last commit. There are several packages that performs
   this task; the reason I've ended up with =git-gutter-fringe= is that it
   reuses the (already present) fringe, saving a tiny bit of screen-estate.

   I smuggled some configurations from [[https://github.com/torenord/.emacs.d/][torenord]], providing a cleaner look.

   #+BEGIN_SRC emacs-lisp
   (require 'git-gutter-fringe)

   (dolist (p '((git-gutter:added    . "#0c0")
                (git-gutter:deleted  . "#c00")
                (git-gutter:modified . "#c0c")))
     (set-face-foreground (car p) (cdr p))
     (set-face-background (car p) (cdr p)))
   #+END_SRC

   New in Emacs 24.4 is the =prettify-symbols-mode=! It's neat.

   #+BEGIN_SRC emacs-lisp
   (setq-default prettify-symbols-alist '(("lambda" . ?λ)
                                          ("delta" . ?Δ)
                                          ("gamma" . ?Γ)
                                          ("phi" . ?φ)
                                          ("psi" . ?ψ)))
   #+END_SRC  
   
   Enable word count display.

   #+BEGIN_SRC emacs-lisp
   (use-package wc-mode
     :ensure t)
   #+END_SRC


** Org
   I use org extensivly and like the look of org-indent-mode

   #+BEGIN_SRC emacs-lisp
   (use-package org
     :config
     (setq org-startup-indented t))
   #+END_SRC

   Lets setup some helpful stuff
   #+BEGIN_SRC emacs-lisp
   (define-key org-mode-map "\M-q" 'toggle-truncate-lines)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-deadline-warning-days 0)
   #+END_SRC

   


** Org-ref

   #+BEGIN_SRC emacs-lisp
   (use-package org-ref
     :ensure t)

   (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))

   ;; see org-ref for use of these variables
   (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
         org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
         org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/")

   (setq bibtex-completion-bibliography "~/Dropbox/bibliography/references.bib"
         bibtex-completion-library-path "~/Dropbox/bibliography/bibtex-pdfs"
         bibtex-completion-notes-path "~/Dropbox/bibliography/helm-bibtex-notes")

   ;; open pdf with system pdf viewer (works on mac)
   ;;(setq bibtex-completion-pdf-open-function
   ;;  (lambda (fpath)
   ;;    (start-process "open" "*open*" "open" fpath)))

   ;; alternative
   (setq bibtex-completion-pdf-open-function 'org-open-file)
   #+END_SRC
   
   
 
